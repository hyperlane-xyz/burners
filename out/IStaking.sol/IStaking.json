{"abi":[{"type":"function","name":"claimUnstakeRequest","inputs":[{"name":"unstakeRequestID","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mETHToETH","inputs":[{"name":"mETHAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"minimumUnstakeBound","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"unstakeRequest","inputs":[{"name":"methAmount","type":"uint128","internalType":"uint128"},{"name":"minETHAmount","type":"uint128","internalType":"uint128"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimUnstakeRequest(uint256)":"2bf67650","mETHToETH(uint256)":"5890c11c","minimumUnstakeBound()":"35ead2a4","unstakeRequest(uint128,uint128)":"891ef43e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeRequestID\",\"type\":\"uint256\"}],\"name\":\"claimUnstakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mETHAmount\",\"type\":\"uint256\"}],\"name\":\"mETHToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUnstakeBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"methAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minETHAmount\",\"type\":\"uint128\"}],\"name\":\"unstakeRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimUnstakeRequest(uint256)\":{\"details\":\"See also {UnstakeRequestsManager} for a more detailed explanation of finalization and request filling.\"},\"unstakeRequest(uint128,uint128)\":{\"details\":\"Transfers the specified amount of mETH to the staking contract and locks it there until it is burned on request claim. The staking contract must therefore be approved to move the user's mETH on their behalf.\",\"params\":{\"methAmount\":\"The amount of mETH to unstake.\",\"minETHAmount\":\"The minimum amount of ETH that the user expects to receive.\"},\"returns\":{\"_0\":\"The request ID.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimUnstakeRequest(uint256)\":{\"notice\":\"Interface for users to claim their finalized and filled unstaking requests.\"},\"mETHToETH(uint256)\":{\"notice\":\"Converts from ETH to mETH using the current exchange rate. The exchange rate is given by the total supply of mETH and total ETH controlled by the protocol.\"},\"minimumUnstakeBound()\":{\"notice\":\"The minimum amount of mETH users can unstake.\"},\"unstakeRequest(uint128,uint128)\":{\"notice\":\"Interface for users to submit a request to unstake.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/burners/mETH/IStaking.sol\":\"IStaking\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@symbioticfi/core/=lib/core/\",\":core/=lib/core/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/burners/mETH/IStaking.sol\":{\"keccak256\":\"0x3b375589d2b1a3f8c50f290242faa8c095e633fcf6b003a32bd9d4ff87b6b228\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c9277abe9da89beda059916b836d026c3aee26523baa42f120326a13de2475e\",\"dweb:/ipfs/QmUp1XQm5qsReF89QEeMzhKeBNGhAHgwpJ5jXeTqXVfV7S\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"unstakeRequestID","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"claimUnstakeRequest"},{"inputs":[{"internalType":"uint256","name":"mETHAmount","type":"uint256"}],"stateMutability":"view","type":"function","name":"mETHToETH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"minimumUnstakeBound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint128","name":"methAmount","type":"uint128"},{"internalType":"uint128","name":"minETHAmount","type":"uint128"}],"stateMutability":"nonpayable","type":"function","name":"unstakeRequest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"claimUnstakeRequest(uint256)":{"details":"See also {UnstakeRequestsManager} for a more detailed explanation of finalization and request filling."},"unstakeRequest(uint128,uint128)":{"details":"Transfers the specified amount of mETH to the staking contract and locks it there until it is burned on request claim. The staking contract must therefore be approved to move the user's mETH on their behalf.","params":{"methAmount":"The amount of mETH to unstake.","minETHAmount":"The minimum amount of ETH that the user expects to receive."},"returns":{"_0":"The request ID."}}},"version":1},"userdoc":{"kind":"user","methods":{"claimUnstakeRequest(uint256)":{"notice":"Interface for users to claim their finalized and filled unstaking requests."},"mETHToETH(uint256)":{"notice":"Converts from ETH to mETH using the current exchange rate. The exchange rate is given by the total supply of mETH and total ETH controlled by the protocol."},"minimumUnstakeBound()":{"notice":"The minimum amount of mETH users can unstake."},"unstakeRequest(uint128,uint128)":{"notice":"Interface for users to submit a request to unstake."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@symbioticfi/core/=lib/core/","core/=lib/core/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/burners/mETH/IStaking.sol":"IStaking"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/interfaces/burners/mETH/IStaking.sol":{"keccak256":"0x3b375589d2b1a3f8c50f290242faa8c095e633fcf6b003a32bd9d4ff87b6b228","urls":["bzz-raw://8c9277abe9da89beda059916b836d026c3aee26523baa42f120326a13de2475e","dweb:/ipfs/QmUp1XQm5qsReF89QEeMzhKeBNGhAHgwpJ5jXeTqXVfV7S"],"license":"MIT"}},"version":1},"id":147}